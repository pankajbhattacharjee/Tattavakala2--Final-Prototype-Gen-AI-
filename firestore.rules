/**
 * @file Firestore Security Rules for Artisan Products Platform
 *
 * @description This ruleset enforces a user-ownership model for artisans and their products.
 * Artisans can manage their profiles and products. AI-generated stories are publicly readable.
 *
 * @data-structure
 * - /artisans/{artisanId}: Stores artisan profile information.
 * - /artisans/{artisanId}/products/{productId}: Stores product information associated with an artisan.
 * - /ai_stories/{aiStoryId}: Stores AI-generated stories associated with products.
 *
 * @key-security-decisions
 * - Artisans have full control over their profiles and products.
 * - AI stories are publicly readable.
 * - Data validation is minimal to allow for rapid iteration (prototyping mode). Only authorization-related data is validated.
 *
 * @denormalization-for-authorization
 * - Product documents include the `artisanId` to allow direct authorization checks without needing to read the parent artisan document.
 *
 * @structural-segregation
 * - AI stories are stored in a separate top-level collection (`/ai_stories`) to keep product documents lean and allow for public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows artisans to manage their profile information.
     * @path /artisans/{artisanId}
     * @allow (create) User with UID 'user_abc' can create their own artisan profile with artisanId == 'user_abc'.
     * @allow (get) Any user can read an artisan profile.
     * @allow (update) User with UID 'user_abc' can update their own artisan profile with artisanId == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete their own artisan profile with artisanId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create an artisan profile with artisanId == 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the artisan profile of user 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the artisan profile of user 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /artisans/{artisanId} {
      // Read Rules
      allow get: if true;
      allow list: if false;

      // Write Rules
      allow create: if isSignedIn() && isOwner(artisanId) && request.resource.data.id == artisanId;
      allow update: if isSignedIn() && isExistingOwner(artisanId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(artisanId);
    }

    /**
     * @description Allows artisans to manage their products.
     * @path /artisans/{artisanId}/products/{productId}
     * @allow (create) User with UID 'user_abc' can create a product under their artisan profile with artisanId == 'user_abc' and request.resource.data.artisanId == 'user_abc'.
     * @allow (get) Any user can read a product.
     * @allow (update) User with UID 'user_abc' can update their product with artisanId == 'user_abc' and request.resource.data.artisanId == resource.data.artisanId.
     * @allow (delete) User with UID 'user_abc' can delete their product with artisanId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a product under the artisan profile of user 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update a product belonging to artisan 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a product belonging to artisan 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /artisans/{artisanId}/products/{productId} {
      // Read Rules
      allow get: if true;
      allow list: if isOwner(artisanId);

      // Write Rules
      allow create: if isSignedIn() && isOwner(artisanId) && request.resource.data.artisanId == artisanId;
      allow update: if isSignedIn() && isExistingOwner(artisanId) && resource.data.artisanId == request.resource.data.artisanId;
      allow delete: if isSignedIn() && isExistingOwner(artisanId);
    }

    /**
     * @description Allows public read access to AI stories.
     * @path /ai_stories/{aiStoryId}
     * @allow (get) Any user can read an AI story.
     * @allow (list) Any user can list AI stories.
     * @deny (create) No one can create AI stories directly through the client.  Creation should be handled by backend functions.
     * @deny (update) No one can update AI stories directly through the client.  Updates should be handled by backend functions.
     * @deny (delete) No one can delete AI stories directly through the client. Deletion should be handled by backend functions.
     * @principle Allows public read access, restricts write access.
     */
    match /ai_stories/{aiStoryId} {
      // Read Rules
      allow get: if true;
      allow list: if true;

      // Write Rules
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}