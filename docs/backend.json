{
  "entities": {
    "Artisan": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Artisan",
      "type": "object",
      "description": "Represents an artisan who creates and sells products on the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Artisan entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the artisan."
        },
        "email": {
          "type": "string",
          "description": "The email address of the artisan.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product offered by an artisan.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Product entity."
        },
        "artisanId": {
          "type": "string",
          "description": "Reference to Artisan. (Relationship: Artisan 1:N Product)"
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "location": {
          "type": "string",
          "description": "The location (state/region) where the product is made."
        },
        "imageURL": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "aiStoryId": {
          "type": "string",
          "description": "Reference to AIStory. (Relationship: AIStory 1:1 Product)"
        }
      },
      "required": [
        "id",
        "artisanId",
        "name",
        "location",
        "imageURL",
        "aiStoryId"
      ]
    },
    "AIStory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AIStory",
      "type": "object",
      "description": "Represents the AI-generated story for a product.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AIStory entity."
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:1 AIStory)"
        },
        "storyText": {
          "type": "string",
          "description": "The AI-generated story text."
        },
        "language": {
          "type": "string",
          "description": "The language of the AI-generated story."
        }
      },
      "required": [
        "id",
        "productId",
        "storyText",
        "language"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/artisans/{artisanId}",
        "definition": {
          "entityName": "Artisan",
          "schema": {
            "$ref": "#/backend/entities/Artisan"
          },
          "description": "Stores artisan profile information. Includes denormalized data required for authorization in subcollections.",
          "params": [
            {
              "name": "artisanId",
              "description": "The unique identifier of the artisan."
            }
          ]
        }
      },
      {
        "path": "/artisans/{artisanId}/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information, including the artisanId for authorization independence.",
          "params": [
            {
              "name": "artisanId",
              "description": "The unique identifier of the artisan (owner)."
            },
            {
              "name": "productId",
              "description": "The unique identifier of the product."
            }
          ]
        }
      },
      {
        "path": "/ai_stories/{aiStoryId}",
        "definition": {
          "entityName": "AIStory",
          "schema": {
            "$ref": "#/backend/entities/AIStory"
          },
          "description": "Stores AI-generated stories, separate from product data but including productId for association.",
          "params": [
            {
              "name": "aiStoryId",
              "description": "The unique identifier of the AI-generated story."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability. Artisans and their products are modeled with clear ownership and denormalized data to avoid complex security rules that rely on parent document reads. The structure uses path-based ownership for artisan data and products, enhancing security and query performance.\n\nSpecifically:\n\n*   `/artisans/{artisanId}`: Stores artisan profile information. Products are stored as a subcollection (`/artisans/{artisanId}/products/{productId}`) to associate products with their respective artisan. \n*   `/artisans/{artisanId}/products/{productId}`: Product data includes the `artisanId`, allowing direct access control based on ownership. The `aiStoryId` associates a product to its AI-generated story, stored separately.\n*   `/ai_stories/{aiStoryId}`: AI-generated stories are stored separately from product details to keep product documents lean. Includes the `productId` to provide a reverse lookup and maintain the association.\n\nThis design achieves Authorization Independence because the product documents contain the `artisanId` which allows security rules to validate ownership without needing to read the parent artisan document. The AIStory documents do not need to inherit authorization, because they are designed to be publicly readable, as long as they're associated to a Product. This structure supports required QAPs as follows:\n\n*   Secure List Operations: Listing products is secure because security rules can filter products based on the `artisanId`.\n*   Ownership Integrity: Path-based ownership ensures that each product belongs to one and only one artisan."
  }
}