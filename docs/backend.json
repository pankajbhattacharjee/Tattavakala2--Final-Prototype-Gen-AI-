{
  "entities": {
    "Artisan": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Artisan",
      "type": "object",
      "description": "Represents an artisan who creates and sells products.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Artisan entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the artisan."
        },
        "email": {
          "type": "string",
          "description": "Email address of the artisan.",
          "format": "email"
        },
        "location": {
          "type": "string",
          "description": "General location of the artisan (e.g., city, region)."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product offered by an artisan.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Product entity."
        },
        "artisanId": {
          "type": "string",
          "description": "Reference to Artisan. (Relationship: Artisan 1:N Product)"
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Description of the product, potentially AI-generated."
        },
        "locationContext": {
          "type": "string",
          "description": "Location context (state/region) of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image."
        }
      },
      "required": [
        "id",
        "artisanId",
        "name",
        "description",
        "locationContext",
        "imageUrl"
      ]
    },
    "AiStory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AiStory",
      "type": "object",
      "description": "Represents an AI-generated story associated with a product, potentially in multiple languages.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AI Story."
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N AiStory)"
        },
        "language": {
          "type": "string",
          "description": "Language of the AI-generated story (e.g., 'en', 'es', 'fr')."
        },
        "storyText": {
          "type": "string",
          "description": "The AI-generated story text."
        }
      },
      "required": [
        "id",
        "productId",
        "language",
        "storyText"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/artisans/{artisanId}",
        "definition": {
          "entityName": "Artisan",
          "schema": {
            "$ref": "#/backend/entities/Artisan"
          },
          "description": "Stores artisan profiles.",
          "params": [
            {
              "name": "artisanId",
              "description": "Unique identifier for the artisan."
            }
          ]
        }
      },
      {
        "path": "/artisans/{artisanId}/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores products created by each artisan. Includes denormalized 'artisanId' for authorization independence.",
          "params": [
            {
              "name": "artisanId",
              "description": "Unique identifier for the artisan."
            },
            {
              "name": "productId",
              "description": "Unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/artisans/{artisanId}/products/{productId}/ai_stories/{aiStoryId}",
        "definition": {
          "entityName": "AiStory",
          "schema": {
            "$ref": "#/backend/entities/AiStory"
          },
          "description": "Stores AI-generated stories associated with each product. Includes denormalized 'artisanId' and 'productId' for authorization independence.",
          "params": [
            {
              "name": "artisanId",
              "description": "Unique identifier for the artisan."
            },
            {
              "name": "productId",
              "description": "Unique identifier for the product."
            },
            {
              "name": "aiStoryId",
              "description": "Unique identifier for the AI story."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability. It leverages path-based ownership for artisans and their products, along with denormalization to avoid complex security rules.\n\n*   `/artisans/{artisanId}`: Stores artisan profiles. This collection allows artisans to manage their profile information.\n*   `/artisans/{artisanId}/products/{productId}`: Stores products created by each artisan.  The `artisanId` is denormalized into each `Product` document. This denormalization is **critical** for authorization independence.  It avoids the need for `get()` calls in security rules to verify product ownership. This enables atomic creation and updating of products within an artisan's profile. It also allows for efficient querying of all products belonging to a specific artisan.\n*   `/artisans/{artisanId}/products/{productId}/ai_stories/{aiStoryId}`: Stores AI-generated stories associated with each product. The `artisanId` and `productId` are denormalized into each `AiStory` document. This avoids `get()` calls in security rules and enables atomic creation and updating of AI stories for a specific product.\n\nThis structure facilitates secure `list` operations (QAPs) because each collection has a clear and consistent security posture. Products can only be listed within the scope of an Artisan and AiStories can only be listed within the scope of a Product, making it straight forward to write security rules for these lists.  The rules don't need to filter based on data within the documents themselves.  This also minimizes the risk of exposing data to unauthorized users."
  }
}